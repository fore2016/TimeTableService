package com.yg.timetableservice.rxjava;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.yg.timetableservice.struct.PositionTurn;
import com.yg.timetableservice.util.LogUtil;
import com.yg.timetableservice.util.OCSUtil;
import com.yg.timetableservice.util.TimeUtil;
import rx.Observable;
import rx.functions.Func1;
import rx.functions.Func2;

import java.util.*;
public class GetPositionFlatMapper implements Func1<JSONArray, Observable<JSONArray>> {
    public class Zipper implements Func2<Map<String,?>, JSONArray, JSONArray> {
        @Override
        public JSONArray call(Map<String, ?> positionMap, JSONArray turns) {
            //logger.trace("input: " + positionMap + "||" + turns);

            JSONArray positionTurns = new JSONArray();
            for (Object o : turns) {
                PositionTurn positionTurn = (PositionTurn)o;
                String startTime = positionTurn.turn.departTime;
                JSONObject busPosition = (JSONObject)positionMap.get(startTime);
                if (busPosition != null) {
                    //find busPosition
                    int i = 1;
                    for (; i <= busPosition.keySet().size(); i++) {
                        String timeStr = busPosition.getString(String.valueOf(i));
                        TimeUtil arriveTime = new TimeUtil(timeStr);
                        Calendar calendar = Calendar.getInstance();
                        calendar.setTime(new Date(timestamp * 1000));
                        TimeUtil queryTime = new TimeUtil(calendar);
                        if(arriveTime.compareTo(queryTime) == 1) break;
                    }
                    positionTurn.nextStopOrder = i;
                }
                positionTurns.add(positionTurn);
            }
            LogUtil.asyncDebug(new Object[]{"get position:", positionTurns});
            return positionTurns;
        }
    }

    private OCSUtil ocsUtil;
    private long timestamp;
    public GetPositionFlatMapper(long timestamp, OCSUtil ocsUtil) {
        this.timestamp = timestamp;
        this.ocsUtil = ocsUtil;
    }
    @Override
    public Observable<JSONArray> call(JSONArray allturns) {
        List<String> keys = new ArrayList<>();
        for (Object o : allturns) {
            keys.add(((PositionTurn)o).turn.departTime);
        }

        Observable<Map<String, ?>> ocsObservable = ocsUtil.asyncGetBulkData(keys);
        Observable<JSONArray> JSONArrayObservable = Observable.just(allturns);
        return Observable.zip(ocsObservable, JSONArrayObservable, new Zipper());
    }

}
